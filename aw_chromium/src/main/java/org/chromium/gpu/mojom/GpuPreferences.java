// GpuPreferences.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     gpu/ipc/common/gpu_preferences.mojom
//

package org.chromium.gpu.mojom;

import androidx.annotation.IntDef;


public final class GpuPreferences extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 88;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(88, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public boolean disableAcceleratedVideoDecode;
    public boolean disableAcceleratedVideoEncode;
    public boolean gpuStartupDialog;
    public boolean disableGpuWatchdog;
    public boolean gpuSandboxStartEarly;
    public boolean enableLowLatencyDxva;
    public boolean enableZeroCopyDxgiVideo;
    public boolean enableNv12DxgiVideo;
    public boolean disableSoftwareRasterizer;
    public boolean logGpuControlListDecisions;
    public boolean compileShaderAlwaysSucceeds;
    public boolean disableGlErrorLimit;
    public boolean disableGlslTranslator;
    public boolean disableShaderNameHashing;
    public boolean enableGpuCommandLogging;
    public boolean enableGpuDebugging;
    public boolean enableGpuServiceLoggingGpu;
    public boolean enableGpuDriverDebugLogging;
    public boolean disableGpuProgramCache;
    public boolean enforceGlMinimums;
    public int forceGpuMemAvailableBytes;
    public int forceGpuMemDiscardableLimitBytes;
    public int forceMaxTextureSize;
    public int gpuProgramCacheSize;
    public boolean disableGpuShaderDiskCache;
    public boolean enableThreadedTextureMailboxes;
    public boolean glShaderIntermOutput;
    public boolean enableAndroidSurfaceControl;
    public boolean enableGpuServiceLogging;
    public boolean enableGpuServiceTracing;
    public boolean usePassthroughCmdDecoder;
    public boolean disableBiplanarGpuMemoryBuffersForVideoFrames;
    public org.chromium.gfx.mojom.BufferUsageAndFormat[] textureTargetExceptionList;
    public boolean ignoreGpuBlocklist;
    public boolean watchdogStartsBackgrounded;
    public int grContextType;
    public int useVulkan;
    public boolean enableVulkanProtectedMemory;
    public boolean disableVulkanSurface;
    public boolean disableVulkanFallbackToGlForTesting;
    public int vulkanHeapMemoryLimit;
    public int vulkanSyncCpuMemoryLimit;
    public boolean enableGpuBenchmarkingExtension;
    public boolean enableWebgpu;
    public boolean enableUnsafeWebgpu;
    public boolean enableWebgpuDeveloperFeatures;
    public int useWebgpuAdapter;
    public int useWebgpuPowerPreference;
    public boolean forceWebgpuCompat;
    public int enableDawnBackendValidation;
    public String[] enabledDawnFeaturesList;
    public String[] disabledDawnFeaturesList;
    public boolean enableGpuBlockedTimeMetric;
    public boolean enablePerfDataCollection;
    public boolean enableNativeGpuMemoryBuffers;
    public boolean forceSeparateEglDisplayForWebglTesting;

    private GpuPreferences(int version) {
        super(STRUCT_SIZE, version);
    }

    public GpuPreferences() {
        this(0);
    }

    public static GpuPreferences deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static GpuPreferences deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static GpuPreferences decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        GpuPreferences result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new GpuPreferences(elementsOrVersion);
                {
                    
                result.disableAcceleratedVideoDecode = decoder0.readBoolean(8, 0);
                }
                {
                    
                result.disableAcceleratedVideoEncode = decoder0.readBoolean(8, 1);
                }
                {
                    
                result.gpuStartupDialog = decoder0.readBoolean(8, 2);
                }
                {
                    
                result.disableGpuWatchdog = decoder0.readBoolean(8, 3);
                }
                {
                    
                result.gpuSandboxStartEarly = decoder0.readBoolean(8, 4);
                }
                {
                    
                result.enableLowLatencyDxva = decoder0.readBoolean(8, 5);
                }
                {
                    
                result.enableZeroCopyDxgiVideo = decoder0.readBoolean(8, 6);
                }
                {
                    
                result.enableNv12DxgiVideo = decoder0.readBoolean(8, 7);
                }
                {
                    
                result.disableSoftwareRasterizer = decoder0.readBoolean(9, 0);
                }
                {
                    
                result.logGpuControlListDecisions = decoder0.readBoolean(9, 1);
                }
                {
                    
                result.compileShaderAlwaysSucceeds = decoder0.readBoolean(9, 2);
                }
                {
                    
                result.disableGlErrorLimit = decoder0.readBoolean(9, 3);
                }
                {
                    
                result.disableGlslTranslator = decoder0.readBoolean(9, 4);
                }
                {
                    
                result.disableShaderNameHashing = decoder0.readBoolean(9, 5);
                }
                {
                    
                result.enableGpuCommandLogging = decoder0.readBoolean(9, 6);
                }
                {
                    
                result.enableGpuDebugging = decoder0.readBoolean(9, 7);
                }
                {
                    
                result.enableGpuServiceLoggingGpu = decoder0.readBoolean(10, 0);
                }
                {
                    
                result.enableGpuDriverDebugLogging = decoder0.readBoolean(10, 1);
                }
                {
                    
                result.disableGpuProgramCache = decoder0.readBoolean(10, 2);
                }
                {
                    
                result.enforceGlMinimums = decoder0.readBoolean(10, 3);
                }
                {
                    
                result.disableGpuShaderDiskCache = decoder0.readBoolean(10, 4);
                }
                {
                    
                result.enableThreadedTextureMailboxes = decoder0.readBoolean(10, 5);
                }
                {
                    
                result.glShaderIntermOutput = decoder0.readBoolean(10, 6);
                }
                {
                    
                result.enableAndroidSurfaceControl = decoder0.readBoolean(10, 7);
                }
                {
                    
                result.enableGpuServiceLogging = decoder0.readBoolean(11, 0);
                }
                {
                    
                result.enableGpuServiceTracing = decoder0.readBoolean(11, 1);
                }
                {
                    
                result.usePassthroughCmdDecoder = decoder0.readBoolean(11, 2);
                }
                {
                    
                result.disableBiplanarGpuMemoryBuffersForVideoFrames = decoder0.readBoolean(11, 3);
                }
                {
                    
                result.ignoreGpuBlocklist = decoder0.readBoolean(11, 4);
                }
                {
                    
                result.watchdogStartsBackgrounded = decoder0.readBoolean(11, 5);
                }
                {
                    
                result.enableVulkanProtectedMemory = decoder0.readBoolean(11, 6);
                }
                {
                    
                result.disableVulkanSurface = decoder0.readBoolean(11, 7);
                }
                {
                    
                result.forceGpuMemAvailableBytes = decoder0.readInt(12);
                }
                {
                    
                result.forceGpuMemDiscardableLimitBytes = decoder0.readInt(16);
                }
                {
                    
                result.forceMaxTextureSize = decoder0.readInt(20);
                }
                {
                    
                result.gpuProgramCacheSize = decoder0.readInt(24);
                }
                {
                    
                result.grContextType = decoder0.readInt(28);
                    GrContextType.validate(result.grContextType);
                    result.grContextType = GrContextType.toKnownValue(result.grContextType);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.textureTargetExceptionList = new org.chromium.gfx.mojom.BufferUsageAndFormat[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.textureTargetExceptionList[i1] = org.chromium.gfx.mojom.BufferUsageAndFormat.decode(decoder2);
                    }
                }
                }
                {
                    
                result.useVulkan = decoder0.readInt(40);
                    VulkanImplementationName.validate(result.useVulkan);
                    result.useVulkan = VulkanImplementationName.toKnownValue(result.useVulkan);
                }
                {
                    
                result.disableVulkanFallbackToGlForTesting = decoder0.readBoolean(44, 0);
                }
                {
                    
                result.enableGpuBenchmarkingExtension = decoder0.readBoolean(44, 1);
                }
                {
                    
                result.enableWebgpu = decoder0.readBoolean(44, 2);
                }
                {
                    
                result.enableUnsafeWebgpu = decoder0.readBoolean(44, 3);
                }
                {
                    
                result.enableWebgpuDeveloperFeatures = decoder0.readBoolean(44, 4);
                }
                {
                    
                result.forceWebgpuCompat = decoder0.readBoolean(44, 5);
                }
                {
                    
                result.enableGpuBlockedTimeMetric = decoder0.readBoolean(44, 6);
                }
                {
                    
                result.enablePerfDataCollection = decoder0.readBoolean(44, 7);
                }
                {
                    
                result.enableNativeGpuMemoryBuffers = decoder0.readBoolean(45, 0);
                }
                {
                    
                result.forceSeparateEglDisplayForWebglTesting = decoder0.readBoolean(45, 1);
                }
                {
                    
                result.vulkanHeapMemoryLimit = decoder0.readInt(48);
                }
                {
                    
                result.vulkanSyncCpuMemoryLimit = decoder0.readInt(52);
                }
                {
                    
                result.useWebgpuAdapter = decoder0.readInt(56);
                    WebGpuAdapterName.validate(result.useWebgpuAdapter);
                    result.useWebgpuAdapter = WebGpuAdapterName.toKnownValue(result.useWebgpuAdapter);
                }
                {
                    
                result.useWebgpuPowerPreference = decoder0.readInt(60);
                    WebGpuPowerPreference.validate(result.useWebgpuPowerPreference);
                    result.useWebgpuPowerPreference = WebGpuPowerPreference.toKnownValue(result.useWebgpuPowerPreference);
                }
                {
                    
                result.enableDawnBackendValidation = decoder0.readInt(64);
                    DawnBackendValidationLevel.validate(result.enableDawnBackendValidation);
                    result.enableDawnBackendValidation = DawnBackendValidationLevel.toKnownValue(result.enableDawnBackendValidation);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.enabledDawnFeaturesList = new String[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        result.enabledDawnFeaturesList[i1] = decoder1.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(80, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.disabledDawnFeaturesList = new String[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        result.disabledDawnFeaturesList[i1] = decoder1.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    }
                }
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.disableAcceleratedVideoDecode, 8, 0);
        
        encoder0.encode(this.disableAcceleratedVideoEncode, 8, 1);
        
        encoder0.encode(this.gpuStartupDialog, 8, 2);
        
        encoder0.encode(this.disableGpuWatchdog, 8, 3);
        
        encoder0.encode(this.gpuSandboxStartEarly, 8, 4);
        
        encoder0.encode(this.enableLowLatencyDxva, 8, 5);
        
        encoder0.encode(this.enableZeroCopyDxgiVideo, 8, 6);
        
        encoder0.encode(this.enableNv12DxgiVideo, 8, 7);
        
        encoder0.encode(this.disableSoftwareRasterizer, 9, 0);
        
        encoder0.encode(this.logGpuControlListDecisions, 9, 1);
        
        encoder0.encode(this.compileShaderAlwaysSucceeds, 9, 2);
        
        encoder0.encode(this.disableGlErrorLimit, 9, 3);
        
        encoder0.encode(this.disableGlslTranslator, 9, 4);
        
        encoder0.encode(this.disableShaderNameHashing, 9, 5);
        
        encoder0.encode(this.enableGpuCommandLogging, 9, 6);
        
        encoder0.encode(this.enableGpuDebugging, 9, 7);
        
        encoder0.encode(this.enableGpuServiceLoggingGpu, 10, 0);
        
        encoder0.encode(this.enableGpuDriverDebugLogging, 10, 1);
        
        encoder0.encode(this.disableGpuProgramCache, 10, 2);
        
        encoder0.encode(this.enforceGlMinimums, 10, 3);
        
        encoder0.encode(this.disableGpuShaderDiskCache, 10, 4);
        
        encoder0.encode(this.enableThreadedTextureMailboxes, 10, 5);
        
        encoder0.encode(this.glShaderIntermOutput, 10, 6);
        
        encoder0.encode(this.enableAndroidSurfaceControl, 10, 7);
        
        encoder0.encode(this.enableGpuServiceLogging, 11, 0);
        
        encoder0.encode(this.enableGpuServiceTracing, 11, 1);
        
        encoder0.encode(this.usePassthroughCmdDecoder, 11, 2);
        
        encoder0.encode(this.disableBiplanarGpuMemoryBuffersForVideoFrames, 11, 3);
        
        encoder0.encode(this.ignoreGpuBlocklist, 11, 4);
        
        encoder0.encode(this.watchdogStartsBackgrounded, 11, 5);
        
        encoder0.encode(this.enableVulkanProtectedMemory, 11, 6);
        
        encoder0.encode(this.disableVulkanSurface, 11, 7);
        
        encoder0.encode(this.forceGpuMemAvailableBytes, 12);
        
        encoder0.encode(this.forceGpuMemDiscardableLimitBytes, 16);
        
        encoder0.encode(this.forceMaxTextureSize, 20);
        
        encoder0.encode(this.gpuProgramCacheSize, 24);
        
        encoder0.encode(this.grContextType, 28);
        
        if (this.textureTargetExceptionList == null) {
            encoder0.encodeNullPointer(32, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.textureTargetExceptionList.length, 32, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.textureTargetExceptionList.length; ++i0) {
                
                encoder1.encode(this.textureTargetExceptionList[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.useVulkan, 40);
        
        encoder0.encode(this.disableVulkanFallbackToGlForTesting, 44, 0);
        
        encoder0.encode(this.enableGpuBenchmarkingExtension, 44, 1);
        
        encoder0.encode(this.enableWebgpu, 44, 2);
        
        encoder0.encode(this.enableUnsafeWebgpu, 44, 3);
        
        encoder0.encode(this.enableWebgpuDeveloperFeatures, 44, 4);
        
        encoder0.encode(this.forceWebgpuCompat, 44, 5);
        
        encoder0.encode(this.enableGpuBlockedTimeMetric, 44, 6);
        
        encoder0.encode(this.enablePerfDataCollection, 44, 7);
        
        encoder0.encode(this.enableNativeGpuMemoryBuffers, 45, 0);
        
        encoder0.encode(this.forceSeparateEglDisplayForWebglTesting, 45, 1);
        
        encoder0.encode(this.vulkanHeapMemoryLimit, 48);
        
        encoder0.encode(this.vulkanSyncCpuMemoryLimit, 52);
        
        encoder0.encode(this.useWebgpuAdapter, 56);
        
        encoder0.encode(this.useWebgpuPowerPreference, 60);
        
        encoder0.encode(this.enableDawnBackendValidation, 64);
        
        if (this.enabledDawnFeaturesList == null) {
            encoder0.encodeNullPointer(72, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.enabledDawnFeaturesList.length, 72, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.enabledDawnFeaturesList.length; ++i0) {
                
                encoder1.encode(this.enabledDawnFeaturesList[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        if (this.disabledDawnFeaturesList == null) {
            encoder0.encodeNullPointer(80, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.disabledDawnFeaturesList.length, 80, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.disabledDawnFeaturesList.length; ++i0) {
                
                encoder1.encode(this.disabledDawnFeaturesList[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
    }
}
// DisplaySnapshot.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     ui/display/mojom/display_snapshot.mojom
//

package org.chromium.display.mojom;

import androidx.annotation.IntDef;


public final class DisplaySnapshot extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 176;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(176, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public long displayId;
    public long portDisplayId;
    public long edidDisplayId;
    public short connectorIndex;
    public org.chromium.gfx.mojom.Point origin;
    public org.chromium.gfx.mojom.Size physicalSize;
    public int type;
    public long baseConnectorId;
    public long[] pathTopology;
    public boolean isAspectPreservingScaling;
    public boolean hasOverscan;
    public int privacyScreenState;
    public boolean hasContentProtectionKey;
    public boolean hasColorCorrectionMatrix;
    public boolean colorCorrectionInLinearSpace;
    public org.chromium.gfx.mojom.ColorSpace colorSpace;
    public int bitsPerChannel;
    public org.chromium.gfx.mojom.HdrStaticMetadata hdrStaticMetadata;
    public String displayName;
    public org.chromium.mojo_base.mojom.FilePath sysPath;
    public DisplayMode[] modes;
    public int panelOrientation;
    public byte[] edid;
    public long currentModeIndex;
    public boolean hasCurrentMode;
    public long nativeModeIndex;
    public boolean hasNativeMode;
    public long productCode;
    public int yearOfManufacture;
    public org.chromium.gfx.mojom.Size maximumCursorSize;
    public int variableRefreshRateState;
    public short vsyncRateMin;

    private DisplaySnapshot(int version) {
        super(STRUCT_SIZE, version);
    }

    public DisplaySnapshot() {
        this(0);
    }

    public static DisplaySnapshot deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DisplaySnapshot deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DisplaySnapshot decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        DisplaySnapshot result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new DisplaySnapshot(elementsOrVersion);
                {
                    
                result.displayId = decoder0.readLong(8);
                }
                {
                    
                result.portDisplayId = decoder0.readLong(16);
                }
                {
                    
                result.edidDisplayId = decoder0.readLong(24);
                }
                {
                    
                result.connectorIndex = decoder0.readShort(32);
                }
                {
                    
                result.isAspectPreservingScaling = decoder0.readBoolean(34, 0);
                }
                {
                    
                result.hasOverscan = decoder0.readBoolean(34, 1);
                }
                {
                    
                result.hasContentProtectionKey = decoder0.readBoolean(34, 2);
                }
                {
                    
                result.hasColorCorrectionMatrix = decoder0.readBoolean(34, 3);
                }
                {
                    
                result.colorCorrectionInLinearSpace = decoder0.readBoolean(34, 4);
                }
                {
                    
                result.hasCurrentMode = decoder0.readBoolean(34, 5);
                }
                {
                    
                result.hasNativeMode = decoder0.readBoolean(34, 6);
                }
                {
                    
                result.type = decoder0.readInt(36);
                    DisplayConnectionType.validate(result.type);
                    result.type = DisplayConnectionType.toKnownValue(result.type);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                result.origin = org.chromium.gfx.mojom.Point.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                result.physicalSize = org.chromium.gfx.mojom.Size.decode(decoder1);
                }
                {
                    
                result.baseConnectorId = decoder0.readLong(56);
                }
                {
                    
                result.pathTopology = decoder0.readLongs(64, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                }
                {
                    
                result.privacyScreenState = decoder0.readInt(72);
                    PrivacyScreenState.validate(result.privacyScreenState);
                    result.privacyScreenState = PrivacyScreenState.toKnownValue(result.privacyScreenState);
                }
                {
                    
                result.bitsPerChannel = decoder0.readInt(76);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(80, false);
                result.colorSpace = org.chromium.gfx.mojom.ColorSpace.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(88, true);
                result.hdrStaticMetadata = org.chromium.gfx.mojom.HdrStaticMetadata.decode(decoder1);
                }
                {
                    
                result.displayName = decoder0.readString(96, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(104, false);
                result.sysPath = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(112, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.modes = new DisplayMode[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.modes[i1] = DisplayMode.decode(decoder2);
                    }
                }
                }
                {
                    
                result.panelOrientation = decoder0.readInt(120);
                    PanelOrientation.validate(result.panelOrientation);
                    result.panelOrientation = PanelOrientation.toKnownValue(result.panelOrientation);
                }
                {
                    
                result.yearOfManufacture = decoder0.readInt(124);
                }
                {
                    
                result.edid = decoder0.readBytes(128, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                }
                {
                    
                result.currentModeIndex = decoder0.readLong(136);
                }
                {
                    
                result.nativeModeIndex = decoder0.readLong(144);
                }
                {
                    
                result.productCode = decoder0.readLong(152);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(160, false);
                result.maximumCursorSize = org.chromium.gfx.mojom.Size.decode(decoder1);
                }
                {
                    
                result.variableRefreshRateState = decoder0.readInt(168);
                    VariableRefreshRateState.validate(result.variableRefreshRateState);
                    result.variableRefreshRateState = VariableRefreshRateState.toKnownValue(result.variableRefreshRateState);
                }
                {
                    
                result.vsyncRateMin = decoder0.readShort(172);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.displayId, 8);
        
        encoder0.encode(this.portDisplayId, 16);
        
        encoder0.encode(this.edidDisplayId, 24);
        
        encoder0.encode(this.connectorIndex, 32);
        
        encoder0.encode(this.isAspectPreservingScaling, 34, 0);
        
        encoder0.encode(this.hasOverscan, 34, 1);
        
        encoder0.encode(this.hasContentProtectionKey, 34, 2);
        
        encoder0.encode(this.hasColorCorrectionMatrix, 34, 3);
        
        encoder0.encode(this.colorCorrectionInLinearSpace, 34, 4);
        
        encoder0.encode(this.hasCurrentMode, 34, 5);
        
        encoder0.encode(this.hasNativeMode, 34, 6);
        
        encoder0.encode(this.type, 36);
        
        encoder0.encode(this.origin, 40, false);
        
        encoder0.encode(this.physicalSize, 48, false);
        
        encoder0.encode(this.baseConnectorId, 56);
        
        encoder0.encode(this.pathTopology, 64, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        
        encoder0.encode(this.privacyScreenState, 72);
        
        encoder0.encode(this.bitsPerChannel, 76);
        
        encoder0.encode(this.colorSpace, 80, false);
        
        encoder0.encode(this.hdrStaticMetadata, 88, true);
        
        encoder0.encode(this.displayName, 96, false);
        
        encoder0.encode(this.sysPath, 104, false);
        
        if (this.modes == null) {
            encoder0.encodeNullPointer(112, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.modes.length, 112, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.modes.length; ++i0) {
                
                encoder1.encode(this.modes[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.panelOrientation, 120);
        
        encoder0.encode(this.yearOfManufacture, 124);
        
        encoder0.encode(this.edid, 128, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        
        encoder0.encode(this.currentModeIndex, 136);
        
        encoder0.encode(this.nativeModeIndex, 144);
        
        encoder0.encode(this.productCode, 152);
        
        encoder0.encode(this.maximumCursorSize, 160, false);
        
        encoder0.encode(this.variableRefreshRateState, 168);
        
        encoder0.encode(this.vsyncRateMin, 172);
    }
}
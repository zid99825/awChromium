
// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     java_cpp_enum.py
// From
//     ../../components/autofill/core/browser/field_types.h

package org.chromium.components.autofill;

import androidx.annotation.IntDef;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

@IntDef({
    ServerFieldType.NO_SERVER_DATA, ServerFieldType.UNKNOWN_TYPE, ServerFieldType.EMPTY_TYPE,
    ServerFieldType.NAME_FIRST, ServerFieldType.NAME_MIDDLE, ServerFieldType.NAME_LAST,
    ServerFieldType.NAME_MIDDLE_INITIAL, ServerFieldType.NAME_FULL, ServerFieldType.NAME_SUFFIX,
    ServerFieldType.EMAIL_ADDRESS, ServerFieldType.PHONE_HOME_NUMBER,
    ServerFieldType.PHONE_HOME_CITY_CODE, ServerFieldType.PHONE_HOME_COUNTRY_CODE,
    ServerFieldType.PHONE_HOME_CITY_AND_NUMBER, ServerFieldType.PHONE_HOME_WHOLE_NUMBER,
    ServerFieldType.ADDRESS_HOME_LINE1, ServerFieldType.ADDRESS_HOME_LINE2,
    ServerFieldType.ADDRESS_HOME_APT_NUM, ServerFieldType.ADDRESS_HOME_CITY,
    ServerFieldType.ADDRESS_HOME_STATE, ServerFieldType.ADDRESS_HOME_ZIP,
    ServerFieldType.ADDRESS_HOME_COUNTRY, ServerFieldType.CREDIT_CARD_NAME_FULL,
    ServerFieldType.CREDIT_CARD_NUMBER, ServerFieldType.CREDIT_CARD_EXP_MONTH,
    ServerFieldType.CREDIT_CARD_EXP_2_DIGIT_YEAR, ServerFieldType.CREDIT_CARD_EXP_4_DIGIT_YEAR,
    ServerFieldType.CREDIT_CARD_EXP_DATE_2_DIGIT_YEAR,
    ServerFieldType.CREDIT_CARD_EXP_DATE_4_DIGIT_YEAR, ServerFieldType.CREDIT_CARD_TYPE,
    ServerFieldType.CREDIT_CARD_VERIFICATION_CODE, ServerFieldType.COMPANY_NAME,
    ServerFieldType.FIELD_WITH_DEFAULT_VALUE, ServerFieldType.MERCHANT_EMAIL_SIGNUP,
    ServerFieldType.MERCHANT_PROMO_CODE, ServerFieldType.PASSWORD,
    ServerFieldType.ACCOUNT_CREATION_PASSWORD, ServerFieldType.ADDRESS_HOME_STREET_ADDRESS,
    ServerFieldType.ADDRESS_HOME_SORTING_CODE, ServerFieldType.ADDRESS_HOME_DEPENDENT_LOCALITY,
    ServerFieldType.ADDRESS_HOME_LINE3, ServerFieldType.NOT_ACCOUNT_CREATION_PASSWORD,
    ServerFieldType.USERNAME, ServerFieldType.USERNAME_AND_EMAIL_ADDRESS,
    ServerFieldType.NEW_PASSWORD, ServerFieldType.PROBABLY_NEW_PASSWORD,
    ServerFieldType.NOT_NEW_PASSWORD, ServerFieldType.CREDIT_CARD_NAME_FIRST,
    ServerFieldType.CREDIT_CARD_NAME_LAST, ServerFieldType.PHONE_HOME_EXTENSION,
    ServerFieldType.CONFIRMATION_PASSWORD, ServerFieldType.AMBIGUOUS_TYPE,
    ServerFieldType.SEARCH_TERM, ServerFieldType.PRICE, ServerFieldType.NOT_PASSWORD,
    ServerFieldType.SINGLE_USERNAME, ServerFieldType.NOT_USERNAME,
    ServerFieldType.ADDRESS_HOME_STREET_NAME, ServerFieldType.ADDRESS_HOME_HOUSE_NUMBER,
    ServerFieldType.ADDRESS_HOME_SUBPREMISE, ServerFieldType.ADDRESS_HOME_OTHER_SUBUNIT,
    ServerFieldType.NAME_LAST_FIRST, ServerFieldType.NAME_LAST_CONJUNCTION,
    ServerFieldType.NAME_LAST_SECOND, ServerFieldType.NAME_HONORIFIC_PREFIX,
    ServerFieldType.ADDRESS_HOME_ADDRESS, ServerFieldType.ADDRESS_HOME_ADDRESS_WITH_NAME,
    ServerFieldType.ADDRESS_HOME_FLOOR, ServerFieldType.NAME_FULL_WITH_HONORIFIC_PREFIX,
    ServerFieldType.BIRTHDATE_DAY, ServerFieldType.BIRTHDATE_MONTH,
    ServerFieldType.BIRTHDATE_4_DIGIT_YEAR, ServerFieldType.PHONE_HOME_CITY_CODE_WITH_TRUNK_PREFIX,
    ServerFieldType.PHONE_HOME_CITY_AND_NUMBER_WITHOUT_TRUNK_PREFIX,
    ServerFieldType.PHONE_HOME_NUMBER_PREFIX, ServerFieldType.PHONE_HOME_NUMBER_SUFFIX,
    ServerFieldType.IBAN_VALUE, ServerFieldType.CREDIT_CARD_STANDALONE_VERIFICATION_CODE,
    ServerFieldType.NUMERIC_QUANTITY, ServerFieldType.ONE_TIME_CODE,
    ServerFieldType.DELIVERY_INSTRUCTIONS, ServerFieldType.ADDRESS_HOME_OVERFLOW,
    ServerFieldType.ADDRESS_HOME_LANDMARK, ServerFieldType.ADDRESS_HOME_OVERFLOW_AND_LANDMARK,
    ServerFieldType.ADDRESS_HOME_ADMIN_LEVEL2, ServerFieldType.ADDRESS_HOME_STREET_LOCATION,
    ServerFieldType.ADDRESS_HOME_BETWEEN_STREETS,
    ServerFieldType.ADDRESS_HOME_BETWEEN_STREETS_OR_LANDMARK,
    ServerFieldType.ADDRESS_HOME_BETWEEN_STREETS_1, ServerFieldType.ADDRESS_HOME_BETWEEN_STREETS_2,
    ServerFieldType.SINGLE_USERNAME_FORGOT_PASSWORD, ServerFieldType.MAX_VALID_FIELD_TYPE
})
@Retention(RetentionPolicy.SOURCE)
public @interface ServerFieldType {
  /**
   * Server indication that it has no data for the requested field.
   */
  int NO_SERVER_DATA = 0;
  /**
   * Client indication that the text entered did not match anything in the personal data.
   */
  int UNKNOWN_TYPE = 1;
  /**
   * The "empty" type indicates that the user hasn't entered anything in this field.
   */
  int EMPTY_TYPE = 2;
  /**
   * Personal Information categorization types.
   */
  int NAME_FIRST = 3;
  int NAME_MIDDLE = 4;
  int NAME_LAST = 5;
  int NAME_MIDDLE_INITIAL = 6;
  int NAME_FULL = 7;
  int NAME_SUFFIX = 8;
  int EMAIL_ADDRESS = 9;
  /**
   * Local number without country code and city/area code.
   */
  int PHONE_HOME_NUMBER = 10;
  /**
   * Never includes a trunk prefix. Used in combination with a PHONE_HOME_COUNTRY_CODE field.
   */
  int PHONE_HOME_CITY_CODE = 11;
  int PHONE_HOME_COUNTRY_CODE = 12;
  /**
   * A number in national format and with a trunk prefix, if applicable in the number's region. Used
   * when no PHONE_HOME_COUNTRY_CODE field is present.
   */
  int PHONE_HOME_CITY_AND_NUMBER = 13;
  int PHONE_HOME_WHOLE_NUMBER = 14;
  /**
   * Work phone numbers (values [15,19]) are deprecated. Fax numbers (values [20,24]) are
   * deprecated. Cell phone numbers (values [25, 29]) are deprecated.
   */
  int ADDRESS_HOME_LINE1 = 30;
  int ADDRESS_HOME_LINE2 = 31;
  int ADDRESS_HOME_APT_NUM = 32;
  int ADDRESS_HOME_CITY = 33;
  int ADDRESS_HOME_STATE = 34;
  int ADDRESS_HOME_ZIP = 35;
  /**
   * TODO(crbug.com/1434216): Autofill stores country codes. When ADDRESS_HOME_COUNTRY is accessed
   * through `AutofillProfile::GetRawInfo()`, a country code is returned. When retrieved using
   * `AutofillProfile::GetInfo()`, the country name is returned.
   */
  int ADDRESS_HOME_COUNTRY = 36;
  /**
   * ADDRESS_BILLING values [37, 43] are deprecated. ADDRESS_SHIPPING values [44, 50] are
   * deprecated.
   */
  int CREDIT_CARD_NAME_FULL = 51;
  int CREDIT_CARD_NUMBER = 52;
  int CREDIT_CARD_EXP_MONTH = 53;
  int CREDIT_CARD_EXP_2_DIGIT_YEAR = 54;
  int CREDIT_CARD_EXP_4_DIGIT_YEAR = 55;
  int CREDIT_CARD_EXP_DATE_2_DIGIT_YEAR = 56;
  int CREDIT_CARD_EXP_DATE_4_DIGIT_YEAR = 57;
  int CREDIT_CARD_TYPE = 58;
  int CREDIT_CARD_VERIFICATION_CODE = 59;
  int COMPANY_NAME = 60;
  /**
   * Generic type whose default value is known.
   */
  int FIELD_WITH_DEFAULT_VALUE = 61;
  /**
   * PHONE_BILLING values [62, 66] are deprecated. NAME_BILLING values [67, 72] are deprecated.
   * Field types for options generally found in merchant buyflows. Given that these are likely to be
   * filled out differently on a case by case basis, they are here primarily for use by
   * AutoCheckout.
   */
  int MERCHANT_EMAIL_SIGNUP = 73;
  /**
   * A promo/gift/coupon code, usually entered during checkout on a commerce web site to reduce the
   * cost of a purchase.
   */
  int MERCHANT_PROMO_CODE = 74;
  /**
   * Field types for the password fields. PASSWORD is the default type for all password fields.
   * ACCOUNT_CREATION_PASSWORD is the first password field in an account creation form and will
   * trigger password generation.
   */
  int PASSWORD = 75;
  int ACCOUNT_CREATION_PASSWORD = 76;
  /**
   * Includes all of the lines of a street address, including newlines, e.g. 123 Main Street, Apt.
   * #42
   */
  int ADDRESS_HOME_STREET_ADDRESS = 77;
  /**
   * ADDRESS_BILLING_STREET_ADDRESS 78 is deprecated. A sorting code is similar to a postal code.
   * However, whereas a postal code normally refers to a single geographical location, a sorting
   * code often does not. Instead, a sorting code is assigned to an organization, which might be
   * geographically distributed. The most prominent example of a sorting code system is CEDEX in
   * France.
   */
  int ADDRESS_HOME_SORTING_CODE = 79;
  /**
   * ADDRESS_BILLING_SORTING_CODE 80 is deprecated. A dependent locality is a subunit of a locality,
   * where a "locality" is roughly equivalent to a city. Examples of dependent localities include
   * inner-city districts and suburbs.
   */
  int ADDRESS_HOME_DEPENDENT_LOCALITY = 81;
  /**
   * ADDRESS_BILLING_DEPENDENT_LOCALITY 82 is deprecated. The third line of the street address.
   */
  int ADDRESS_HOME_LINE3 = 83;
  /**
   * ADDRESS_BILLING_LINE3 84 is deprecated. Inverse of ACCOUNT_CREATION_PASSWORD. Sent when there
   * is data that a previous upload of ACCOUNT_CREATION_PASSWORD was incorrect.
   */
  int NOT_ACCOUNT_CREATION_PASSWORD = 85;
  /**
   * Field types for username fields in password forms.
   */
  int USERNAME = 86;
  int USERNAME_AND_EMAIL_ADDRESS = 87;
  /**
   * Field types related to new password fields on change password forms.
   */
  int NEW_PASSWORD = 88;
  int PROBABLY_NEW_PASSWORD = 89;
  int NOT_NEW_PASSWORD = 90;
  /**
   * Additional field types for credit card fields.
   */
  int CREDIT_CARD_NAME_FIRST = 91;
  int CREDIT_CARD_NAME_LAST = 92;
  /**
   * Extensions are detected, but not filled.
   */
  int PHONE_HOME_EXTENSION = 93;
  /**
   * PROBABLY_ACCOUNT_CREATION_PASSWORD value 94 is deprecated. The confirmation password field in
   * account creation or change password forms.
   */
  int CONFIRMATION_PASSWORD = 95;
  /**
   * The data entered by the user matches multiple pieces of autofill data, none of which were
   * predicted by autofill. This value is used for metrics only, it is not a predicted nor uploaded
   * type.
   */
  int AMBIGUOUS_TYPE = 96;
  /**
   * Search term fields are detected, but not filled.
   */
  int SEARCH_TERM = 97;
  /**
   * Price fields are detected, but not filled.
   */
  int PRICE = 98;
  /**
   * Password-type fields which are not actual passwords.
   */
  int NOT_PASSWORD = 99;
  /**
   * Username field when there is no corresponding password field. It might be because of: 1.
   * Username first flow: a user has to type username first on one page and then password on another
   * page 2. Username and password fields are in different <form>s.
   */
  int SINGLE_USERNAME = 100;
  /**
   * Text-type fields which are not usernames.
   */
  int NOT_USERNAME = 101;
  /**
   * UPI/VPA is a payment method, which is stored and filled. See
   * https://en.wikipedia.org/wiki/Unified_Payments_Interface UPI_VPA value 102 is deprecated. Just
   * the street name of an address, no house number.
   */
  int ADDRESS_HOME_STREET_NAME = 103;
  /**
   * House number of an address, may be alphanumeric.
   */
  int ADDRESS_HOME_HOUSE_NUMBER = 104;
  /**
   * Contains the floor, the staircase the apartment number within a building.
   */
  int ADDRESS_HOME_SUBPREMISE = 105;
  /**
   * A catch-all for other type of subunits (only used until something more precise is defined).
   * Currently not used by Chrome.
   */
  int ADDRESS_HOME_OTHER_SUBUNIT = 106;
  /**
   * Types to represent the structure of a Hispanic/Latinx last name.
   */
  int NAME_LAST_FIRST = 107;
  int NAME_LAST_CONJUNCTION = 108;
  int NAME_LAST_SECOND = 109;
  /**
   * Type to catch name additions like "Mr.", "Ms." or "Dr.".
   */
  int NAME_HONORIFIC_PREFIX = 110;
  /**
   * ADDRESS_HOME_PREMISE_NAME value 111 is deprecated. ADDRESS_HOME_DEPENDENT_STREET_NAME value 112
   * is deprecated. Compound type to join the street and dependent street names.
   * ADDRESS_HOME_STREET_AND_DEPENDENT_STREET_NAME  value 113 is deprecated. The complete formatted
   * address as it would be written on an envelope or in a clear-text field without the name.
   */
  int ADDRESS_HOME_ADDRESS = 114;
  /**
   * The complete formatted address including the name.
   */
  int ADDRESS_HOME_ADDRESS_WITH_NAME = 115;
  /**
   * The floor number within a building.
   */
  int ADDRESS_HOME_FLOOR = 116;
  /**
   * The full name including the honorific prefix.
   */
  int NAME_FULL_WITH_HONORIFIC_PREFIX = 117;
  /**
   * Types to represent a birthdate.
   */
  int BIRTHDATE_DAY = 118;
  int BIRTHDATE_MONTH = 119;
  int BIRTHDATE_4_DIGIT_YEAR = 120;
  /**
   * Types for better trunk prefix support for phone numbers. Like PHONE_HOME_CITY_CODE, but with a
   * trunk prefix, if applicable in the number's region. Used when no PHONE_HOME_COUNTRY_CODE field
   * is present.
   */
  int PHONE_HOME_CITY_CODE_WITH_TRUNK_PREFIX = 121;
  /**
   * Like PHONE_HOME_CITY_AND_NUMBER, but never includes a trunk prefix. Used in combination with a
   * PHONE_HOME_COUNTRY_CODE field.
   */
  int PHONE_HOME_CITY_AND_NUMBER_WITHOUT_TRUNK_PREFIX = 122;
  /**
   * PHONE_HOME_NUMBER = PHONE_HOME_NUMBER_PREFIX + PHONE_HOME_NUMBER_SUFFIX. For the US numbers
   * (650) 234-5678 the types correspond to 234 and 5678.
   */
  int PHONE_HOME_NUMBER_PREFIX = 123;
  int PHONE_HOME_NUMBER_SUFFIX = 124;
  /**
   * International Bank Account Number (IBAN) details are usually entered on banking and merchant
   * websites used to make international transactions. See
   * https://en.wikipedia.org/wiki/International_Bank_Account_Number.
   */
  int IBAN_VALUE = 125;
  /**
   * Standalone card verification code (CVC).
   */
  int CREDIT_CARD_STANDALONE_VERIFICATION_CODE = 126;
  /**
   * Reserved for a server-side-only use: 127 Type of a field that asks for a numeric quantity. Not
   * fillable by Autofill. The purpose is to ignore false positive server classification for numeric
   * types that a prone to false-positive votes.
   */
  int NUMERIC_QUANTITY = 128;
  /**
   * One-time code used for verifying user identity.
   */
  int ONE_TIME_CODE = 129;
  /**
   * Type for additional delivery instructions to find the address.
   */
  int DELIVERY_INSTRUCTIONS = 133;
  /**
   * Additional information for describing the location within a building or gated community. Often
   * called "extra information", "additional information", "address extension", etc.
   */
  int ADDRESS_HOME_OVERFLOW = 135;
  /**
   * A well-known object or feature of the landscape that can easily be recognized to understand
   * where the building is situated.
   */
  int ADDRESS_HOME_LANDMARK = 136;
  /**
   * Combination of types ADDRESS_HOME_OVERFLOW and ADDRESS_HOME_LANDMARK.
   */
  int ADDRESS_HOME_OVERFLOW_AND_LANDMARK = 140;
  /**
   * Administrative area level 2. A sub-division of a state, e.g. a Municipio in Brazil or Mexico.
   */
  int ADDRESS_HOME_ADMIN_LEVEL2 = 141;
  /**
   * Street name and house number in structured address forms. Should NOT be used for US.
   */
  int ADDRESS_HOME_STREET_LOCATION = 142;
  /**
   * The type indicates that the address is at the intersection between two streets. This is a
   * common way of writing addresses in Mexico.
   */
  int ADDRESS_HOME_BETWEEN_STREETS = 143;
  /**
   * Combination of types ADDRESS_HOME_BETWEEN_STREETS or ADDRESS_HOME_LANDMARK.
   */
  int ADDRESS_HOME_BETWEEN_STREETS_OR_LANDMARK = 144;
  /**
   * The meaning of the field is the same as ADDRESS_HOME_BETWEEN_STREETS. The field type should be
   * used for "Entre calle 1" in MX forms which also contain the "Entre calle 2" field.
   */
  int ADDRESS_HOME_BETWEEN_STREETS_1 = 151;
  /**
   * The meaning of the field is the same as ADDRESS_HOME_BETWEEN_STREETS. The field type should be
   * used for "Entre calle 2" in MX forms which also contain the "Entre calle 1" field.
   */
  int ADDRESS_HOME_BETWEEN_STREETS_2 = 152;
  /**
   * ADDRESS_HOME_HOUSE_NUMBER_AND_APT 153 is server-side only. Username field in a password-less
   * forgot password form.
   */
  int SINGLE_USERNAME_FORGOT_PASSWORD = 154;
  /**
   * Autofill fallback type for username fields which accept also email or phone number.
   * EMAIL_OR_PHONE_NUMBER = 155 is server-side only. No new types can be added without a
   * corresponding change to the Autofill server. This enum must be kept in sync with
   * ServerFieldType from * chrome/common/extensions/api/autofill_private.idl *
   * tools/typescript/definitions/autofill_private.d.ts Please update
   * `tools/metrics/histograms/enums.xml` by executing
   * `tools/metrics/histograms/update_autofill_enums.py`.
   */
  int MAX_VALID_FIELD_TYPE = 156;
}
